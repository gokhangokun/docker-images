input {
  gelf {
    type => docker
    port => 25000
  }
}

filter {
  if [tag] == "my-app" {

    if "CorrelationId" not in [message] {
      drop{}
    }

    json {
      source => "message"
      target => "parsedJson"
    }

    if [parsedJson][Requesturl] == "http://localhost/healthcheck" {
      drop{}
    }

    if [parsedJson][LogLevel] {
      mutate {
        add_field => {
          "RequestBody" => "%{[parsedJson][RequestBody]}"
          "ResponseBody" => "%{[parsedJson][ResponseBody]}"
          "Requesturl" => "%{[parsedJson][Requesturl]}"
          "LogLevel" => "%{[parsedJson][LogLevel]}"
          "StatusCode" => "%{[parsedJson][StatusCode]}"
          "ElapsedTime" => "%{[parsedJson][ElapsedTime]}"
        }
      }

      mutate {
        remove_field => ["[parsedJson][ElapsedTime]"]
      }

      mutate {
        convert => [ "ElapsedTime", "float" ]
      }


      if [parsedJson][CorrelationId] {
        mutate {
          add_field => {
            "CorrelationId" => "%{[parsedJson][CorrelationId]}"
          }
        }
      }

      if [parsedJson][Exception] {
        mutate {
          add_field => {
            "Exception" => "%{[parsedJson][Exception]}"
          }
        }
      }

      mutate {
        remove_field => [ "parsedJson" ]
        remove_field => [ "message" ]
      }
    }
    
    date {
      match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
      remove_field => [ "timestamp" ]
    }
  } else if [tag] == "nginx" {
    if [level] == 6 {
      grok {
        match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
        overwrite => [ "message" ]
      } 

      date {
        match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
        remove_field => [ "timestamp" ]
      }
      
      useragent {
        source => "agent"
      }

      mutate {
        convert => { "response" =>"integer" }
        convert => { "bytes" =>"integer" }
        convert => { "responsetime" =>"float" }
        rename => { "name" => "browser_name" }
        rename => { "major" => "browser_major" }
        rename => { "minor" => "browser_minor" }
      }
    }
    # nginx error log 
    if [level] == 3 {
      grok {
        match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")"]
        overwrite => [ "message" ]
      } 

      date {
        match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
        remove_field => [ "timestamp" ]
      }
    }
  } 
  else if [tag] == "mongo" {
    grok {
      match => { "message" => [ "%{MONGO3_LOG}", "%{MONGO_SLOWQUERY}" ] }
    }

    mutate {
      convert => { "level" => "string" }
    }

    date {
      match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
      remove_field => [ "timestamp" ]
    }
  } else {
    drop{}
  }
}

output {
  elasticsearch {
    hosts => [ "10.114.56.42:8200","10.114.56.46:8200","10.114.56.47:8200" ]
    index => "%{tag}-%{+YYYY.MM.dd}"
  }
}
